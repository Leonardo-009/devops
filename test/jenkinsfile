pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/Leonardo-009/devops'
            }
        }

        stage('Build and Deploy') {
            steps {
                script {
                    docker.image('python:3.9').inside {
                        sh 'pip install flask'
                        sh 'echo "from flask import Flask\\napp = Flask(__name__)\\n@app.route(\\"/\\")\\ndef hello():\\n    return \\"Hello, World!\\"" > app.py'
                        sh 'echo "FROM python:3.9\\nCOPY . /app\\nWORKDIR /app\\nRUN pip install -r requirements.txt\\nEXPOSE 8080\\nCMD [\\"python\\", \\"app.py\\"]" > Dockerfile'
                        sh 'docker build -t meu-app:latest .'
                    }
                }

                // Executar o contêiner Docker e aguardar até que esteja pronto
                script {
                    sh 'docker run -d -p 9099:9099 meu-app:latest'
                    sleep 10  // Aguarda 10 segundos (ajuste conforme necessário)

                    // Obter o ID do contêiner
                    def containerId = sh(script: 'docker ps -q', returnStatus: true).trim()

                    // Obter o IP do contêiner
                    def containerIp = sh(script: "docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${containerId}", returnStatus: true).trim()

                    echo "Aplicativo em execução em http://${containerIp}:8080"
                }
                
                // Iniciar o serviço Docker
                sh 'sudo service docker start'  // ou 'sudo systemctl start docker'
            }
        }
    }

    post {
        success {
            echo 'Pipeline concluído com sucesso!'
        }
        failure {
            echo 'Houve uma falha no pipeline. Verifique os logs para mais informações.'
        }
    }
}
